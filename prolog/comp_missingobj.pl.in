/** <module> comp_missingobj

  Description:
    Determine which objects are missing on the table by combining
    perceptions, knowledge processing and probabilistic reasoning.


  Copyright (C) 2010 by Moritz Tenorth

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

@author Moritz Tenorth
@license GPL
*/

:- module(comp_missingobj,
    [
      comp_missingObjects/1
    ]).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% visualisation canvas
:- use_module(library('mod_vis')).



%% comp_missingObjects(-Missing)
%
% check which objects are on the table, use prob inference to determine which ones
% should be, compare both and create instances of the missing items with an existence
% probability as determined by the prob inference procedure
%
comp_missingObjects(Missing) :-

  % start the visualisation window
  visualisation_canvas(Canvas),

  % read all objects that are on the table (including queries to vision system)
  rdfs_instance_of(P, knowrob:'VisualPerception'),
  rdfs_instance_of(T, knowrob:'Table-PieceOfFurniture'),
  
  rdf_has(P, knowrob:objectActedOn, AreOnTable),
  rdf_triple(knowrob:'on-Physical', AreOnTable, T),

  % call the probabilistic inference engine
  mod_probcog_tablesetting:required_objects(ShouldBeOnTable),

  % infer which objects are missing
  compute_missing_objects(AreOnTable, ShouldBeOnTable, Missing, MissingTypes),

  display_tables(Tables, Canvas),

  % display which objects are detected and which are missing
  show_present_objects(AreOnTable, Canvas),
  show_missing_objects(Missing, MissingTypes, Canvas, 0).
  


%% compute_missing_objects(+AreOnTable, +ShouldBeOnTableWithProb, -Missing, -MissingTypes)
%
% compare the list of objects that are already on the table with that
% of objects that are supposed to be there to find missing items,
% create instances of these objects with the resp. probability
%
% TODO: UPDATE
%
compute_missing_objects(AreOnTable, ShouldBeOnTableWithProb, Missing, MissingTypes) :-

  % find those elements that have a prob > 0 to be on the table
  findall(Mp, (member(Mp, ShouldBeOnTableWithProb),
              nth0(1, Mp, ProbAtom),
              term_to_atom(Prob, ProbAtom),
              >(Prob, 0)), ShouldBeOnTable),

  % read types of objects on the table
  findall(Tl, (member(O, AreOnTable), rdf_has(O, rdf:type, T),rdf_split_url(_, Tl, T)), AreOnTableTypes),

  % find all objects that should be on the table, but are not member of the set of observed objects
  findall(Mp, (member(Mp, ShouldBeOnTable), nth0(0, Mp, M), not(member(M, AreOnTableTypes))), Missing).





% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%
% visualization
%
%


%% show_missingObjects(+Objs)
%
% create a visualisation canvas and push all the objects given there
%
display_tables([Table|Tables], Canvas) :-

  print('adding table '),print(Table),

  % set the zoom and rotation so that we get some ego-perspective
  jpl_call(Canvas, 'setViewParameters', [156.0, 224.5, 192.75009, -20.350006, 2.2399998], _),
  jpl_call(Canvas, 'addObjectWithChildren', [Table], _),
  display_tables(Tables, Canvas).
display_tables([], _).


show_present_objects(Objs, Canvas) :-
  findall(Obj, (member(Obj, Objs),
                jpl_call(Canvas, 'addObject', [Obj], _),
                jpl_call(Canvas, 'highlight', [Obj, @(true), 0, 256, 0], _)), _).


show_missing_objects([O|Objs], [T|Types], Canvas, Counter) :-

  nth0(1, T, Prob),
  term_to_atom(ProbNum, Prob),

  (=<(0.7, ProbNum) ->
    (jpl_call(Canvas, 'addObject', [O], _),
      jpl_call(Canvas, 'highlight', [O, @(true), 256, 0, 0, Prob], _),
      Counter1 = Counter + 1,
      show_missing_objects(Objs, Types, Canvas, Counter1));

    (Counter1 = Counter + 1,
      show_missing_objects(Objs, Types, Canvas, Counter1))
  ).
show_missing_objects([], [], _).





